// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package bankrmi;

public final class AccountImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("float balance()"),
	new java.rmi.server.Operation("void deposit(float)"),
	new java.rmi.server.Operation("void withdraw(float)")
    };
    
    private static final long interfaceHash = 3389451400590804060L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (opnum < 0) {
	    if (hash == -6999057580273527148L) {
		opnum = 0;
	    } else if (hash == -4286485587922216374L) {
		opnum = 1;
	    } else if (hash == 6542577535903995425L) {
		opnum = 2;
	    } else {
		throw new java.rmi.UnmarshalException("invalid method hash");
	    }
	} else {
	    if (hash != interfaceHash)
		throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	}
	
	bankrmi.AccountImpl server = (bankrmi.AccountImpl) obj;
	switch (opnum) {
	case 0: // balance()
	{
	    call.releaseInputStream();
	    float $result = server.balance();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeFloat($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // deposit(float)
	{
	    float $param_float_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_float_1 = in.readFloat();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.deposit($param_float_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // withdraw(float)
	{
	    float $param_float_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_float_1 = in.readFloat();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.withdraw($param_float_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
